import { useCallback } from 'react';
import { useWireframe } from '../contexts/WireframeContext';

export function useExport() {
  const { vertices3D, edges3D, extractedLines, matchedLines } = useWireframe();

  const downloadFile = useCallback((content, filename, mimeType) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, []);

  const exportOBJ = useCallback(() => {
    if (vertices3D.length === 0) return;

    let objContent = "# Wireframe reconstruction OBJ\n";
    objContent += "# Generated by Wireframe 3D Reconstruction Tool\n";
    objContent += `# Created: ${new Date().toISOString()}\n\n`;

    // Add vertices
    vertices3D.forEach((v, index) => {
      objContent += `v ${v.x.toFixed(6)} ${v.y.toFixed(6)} ${v.z.toFixed(6)}\n`;
    });

    objContent += "\n";

    // Add lines as edges (not standard OBJ but some software supports it)
    edges3D.forEach((edge, index) => {
      objContent += `l ${edge[0] + 1} ${edge[1] + 1}\n`;
    });

    downloadFile(objContent, 'wireframe_lines.obj', 'text/plain');
  }, [vertices3D, edges3D, downloadFile]);

  const exportPLY = useCallback(() => {
    if (vertices3D.length === 0) return;

    let plyContent = "ply\n";
    plyContent += "format ascii 1.0\n";
    plyContent += `comment Generated by Wireframe 3D Reconstruction Tool\n`;
    plyContent += `comment Created: ${new Date().toISOString()}\n`;
    plyContent += `element vertex ${vertices3D.length}\n`;
    plyContent += "property float x\n";
    plyContent += "property float y\n";
    plyContent += "property float z\n";
    plyContent += `element edge ${edges3D.length}\n`;
    plyContent += "property int vertex1\n";
    plyContent += "property int vertex2\n";
    plyContent += "end_header\n";

    // Add vertices
    vertices3D.forEach(v => {
      plyContent += `${v.x.toFixed(6)} ${v.y.toFixed(6)} ${v.z.toFixed(6)}\n`;
    });

    // Add edges
    edges3D.forEach(edge => {
      plyContent += `${edge[0]} ${edge[1]}\n`;
    });

    downloadFile(plyContent, 'wireframe_lines.ply', 'text/plain');
  }, [vertices3D, edges3D, downloadFile]);

  const exportJSON = useCallback(() => {
    if (vertices3D.length === 0) return;

    const data = {
      metadata: {
        title: 'Wireframe 3D Reconstruction',
        created: new Date().toISOString(),
        version: '1.0',
        totalLines: Object.values(extractedLines).reduce((sum, lines) => sum + lines.length, 0),
        matchedLines: matchedLines.length,
        vertices: vertices3D.length,
        edges: edges3D.length
      },
      vertices: vertices3D.map((v, index) => ({ 
        id: index,
        x: parseFloat(v.x.toFixed(6)), 
        y: parseFloat(v.y.toFixed(6)), 
        z: parseFloat(v.z.toFixed(6))
      })),
      edges: edges3D.map((edge, index) => ({
        id: index,
        start: edge[0],
        end: edge[1],
        startVertex: vertices3D[edge[0]],
        endVertex: vertices3D[edge[1]]
      })),
      processing: {
        extractedLines: Object.fromEntries(
          Object.entries(extractedLines).map(([view, lines]) => [
            view,
            {
              count: lines.length,
              lines: lines.map(line => ({
                start: { x: line.x1, y: line.y1 },
                end: { x: line.x2, y: line.y2 },
                length: line.length,
                angle: line.angle
              }))
            }
          ])
        ),
        matchedLines: matchedLines.map(match => ({
          views: [match.view1, match.view2],
          similarity: match.similarity,
          line1: {
            start: { x: match.line1.x1, y: match.line1.y1 },
            end: { x: match.line1.x2, y: match.line1.y2 }
          },
          line2: {
            start: { x: match.line2.x1, y: match.line2.y1 },
            end: { x: match.line2.x2, y: match.line2.y2 }
          }
        }))
      }
    };

    downloadFile(JSON.stringify(data, null, 2), 'wireframe_3d.json', 'application/json');
  }, [vertices3D, edges3D, extractedLines, matchedLines, downloadFile]);

  return {
    exportOBJ,
    exportPLY,
    exportJSON,
    downloadFile
  };
}